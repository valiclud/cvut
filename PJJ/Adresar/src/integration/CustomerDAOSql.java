


package integration;
import java.sql.*;
import core.*;
import java.util.*;
import org.hsqldb.persist.HsqlProperties;


// TODO: Auto-generated Javadoc
/**
 * The Class CustomerDAOSql.
 *
 * @author Ludvik Valíèek
 */
public class CustomerDAOSql implements DAOInterface {

/** The sql. */
Statement sql; //The object used for executing a static SQL statement and returning the results it produces.

/** The customer map. */
SortedMap<CustomerId, Customer> customerMap;

/** The cust. */
Collection <Customer> cust;

/** The c. */
Connection c;

/** The Constant URL. */
static final String URL = "jdbc:hsqldb:file:/NetBeansProjects/Adresar/db/CUSTOMERS;shutdown=true;ifexists=true";
//    static final String URL = "jdbc:hsqldb:file:"+ File.separator +"NetBeansProjects"+ File.separator +
//"Adresar" + File.separator +"db"+ File.separator +"CUSTOMERS";
/** The Constant USER. */
//static final String URL = "jdbc:hsqldb:hsql:/localhost//customers";
    static final String USER = "SA";
    
    /** The Constant PASSWORD. */
    static final String PASSWORD = "";

   /**
    * Instantiates a new customer dao sql.
    *
    * @throws AddressaryException the addressary exception
    */
   public CustomerDAOSql() throws AddressaryException {
        this(URL, USER, PASSWORD);
    }
//   jdbc:hsqldb:hsql://localhost:1701

    /**
 * Instantiates a new customer dao sql.
 *
 * @param url the url
 * @param user the user
 * @param password the password
 * @throws AddressaryException the addressary exception
 */
public CustomerDAOSql (String url, String user, String password) throws AddressaryException {
        try {
            HsqlProperties p = new HsqlProperties();
            p.setProperty("schemas", true);
            p.setProperty("catalogues", true);
            // registrace driveru
            Class.forName("org.hsqldb.jdbcDriver").newInstance();
           
            c = DriverManager.getConnection(url, user, password);

            sql = c.createStatement(); //Creates a <code>Statement</code> object for sending SQL statements to the database.
            
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
           }
        catch (InstantiationException ex) {
            ex.printStackTrace();
            }
        catch (IllegalAccessException ex) {
            ex.printStackTrace();
            }
          catch (SQLException ex) {
            System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
      ex.printStackTrace();
       }
        }


     /* (non-Javadoc)
      * @see integration.DAOInterface#createCustomer(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
      */
     @Override
    public void createCustomer(String name, String surname,String address, String commentary) throws AddressaryException {
       /**
     * Executes the given SQL statement, which may be an <code>INSERT</code>, 
     * <code>UPDATE</code>, or <code>DELETE</code> statement or an
     * SQL statement that returns nothing, such as an SQL DDL statement.
        * 
        * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
        * or (2) 0 for SQL statements that return nothing
        **/
        
        try {
           int n = sql.executeUpdate("INSERT INTO CUSTOMERS VALUES(NULL,'" +name+ "','"  +surname+  "','" +address+ "','" + commentary+"')");
       if (n == -1) {
            System.out.println("ERROR : INSERT INTO CUSTOMERS");
        }
        }
        catch (SQLException ex) {
            throw new AddressaryException(ex);
        }
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#deleteCustomer(core.CustomerId)
      */
     @Override
    public void deleteCustomer(CustomerId customerId) throws AddressaryException {
        try {
            sql.executeUpdate("DELETE FROM CUSTOMERS WHERE ID = " + customerId.getIdNumber() + "");
        } catch (SQLException ex) {
            throw new AddressaryException(ex);
        }
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#listAllCustomers()
      */
     @Override
    public List<Customer> listAllCustomers() throws AddressaryException {
        List<Customer> total = new ArrayList<Customer>();
        try {
            ResultSet result = sql.executeQuery("SELECT * FROM CUSTOMERS"); //A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
            while (result.next()) { //Moves the cursor froward one row from its current position.
                Customer customer = new Customer(new CustomerId(result.getInt("ID")), result.getString("NAME"), result.getString("SURNAME"), result.getString("ADDRESS"), result.getString("COMMENTARY"));
                total.add(customer);
            }
        } catch (SQLException ex) {
            throw new AddressaryException(ex);
        }
        return total;
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#findCustomerById(core.CustomerId)
      */
     @Override
    public Customer findCustomerById(CustomerId customerId) throws AddressaryException {
        ResultSet result;
        try {
            result = sql.executeQuery("SELECT * FROM CUSTOMERS WHERE ID = " + customerId.getIdNumber());
            if (result.next()) { //Moves the cursor froward one row from its current position.
                Customer customer = new Customer(new CustomerId(result.getInt("ID")), result.getString("NAME"), result.getString("SURNAME"), result.getString("ADDRESS"), result.getString("COMMENTARY"));
                return customer;
            }
            return null;
        } catch (SQLException ex) {
            throw new AddressaryException(ex);
        }
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#findCustomerBySurname(java.lang.String)
      */
     @Override
    public Collection <Customer> findCustomerBySurname (String surname)throws AddressaryException {
        Collection <Customer> cc = new ArrayList<Customer>();
        try {
            ResultSet result = sql.executeQuery("SELECT * FROM CUSTOMERS WHERE SURNAME ='" +  surname +"'"); //A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
            while (result.next()) { //Moves the cursor froward one row from its current position.
                  
                  Customer customer = new Customer(new CustomerId(result.getInt("ID")),result.getString(2),  result.getString(3), result.getString(4), result.getString(5));
                  cc.add(customer);
                 }
              
            if (cc==null) {
                throw new AddressaryException("The name does not exist");
        } 
         }
            catch (SQLException ex) {
               
            throw new AddressaryException(ex);
           
        }
        return cc;
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#renewCustomer(core.Customer)
      */
     @Override
    public void renewCustomer(Customer customer) throws AddressaryException {
        try {
            int n = sql.executeUpdate("UPDATE CUSTOMERS " + "" +
                    "SET ADDRESS = '" + customer.getAddress() + "' ," +
                    "NAME = '" + customer.getName() + "'," + "SURNAME = '" + customer.getSurname()+ "'," +
                    "COMMENTARY = '" + customer.getCommentary()+
                    "' WHERE ID = " + customer.getCustomerId());
            if (n == 0) {
                throw new AddressaryException("Update did not happen ");
            }
        }
        catch (SQLException ex) {
             throw new AddressaryException(ex);
        }
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#getLastId()
      */
     @Override
    public int getLastId() throws AddressaryException {
        

//            ResultSet rs = sql.executeQuery("CALL IDENTITY()");
//            rs.next();
//            return rs.getInt(0);
            int i;
            int p=0;
           try { 
               ResultSet result = sql.executeQuery("SELECT * FROM CUSTOMERS");

            while (result.next()) { //Moves the cursor froward one row from its current position.
                i =result.getInt("ID");
                if (i>p) p=i;
        }
                }
        catch (SQLException ex) {
            throw new AddressaryException(ex);
        }
        return p;
    }

     /* (non-Javadoc)
      * @see integration.DAOInterface#existsId(int)
      */
     @Override
    public boolean existsId(int id) throws AddressaryException {
         if (id > getLastId()) return false;
         else return true;      
    }


 /* (non-Javadoc)
  * @see integration.DAOInterface#close()
  */
 @Override
     public void close() throws AddressaryException {
        try {
            c.close();
        } catch (SQLException ex) {
            throw new AddressaryException(ex);
        }
    }

}
